# -*- coding: utf-8 -*-
"""BabyNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iYzFxgnvkPh1ufnO5AAfU76ak7KbcZfv
"""

# Fareinheit to Celsius "predictor"

import random

weight1 = random.randint(1,10) # slope (m)
weight2 = -18                  # y-intercept (b)
learning_rate = 0.01

# this data was 'generated' using google to translate F to C with me manually
# adding some 'noise'. The idea was to emulate 2 different thermometers being
# used to measure on the two scales

data = [[87,31],[97,37],[22,-5],[100,39],[32,0]]

#
def baby_net(input):
  # return m*x+b
  output = weight1*input + weight2
  return(output)

# cost function, energy function, error function, loss function, everything under the sun function
def error(pred,act):
  err = act-pred
  return(err)

# experimenting/testing our error function using some of our data
sample_input = data[1][0]
sample_label = data[1][1]
sample_error = error(baby_net(sample_input),sample_label)
print("Error:",sample_error)
print("Farenheit input",sample_input)
print("Predicted celsius equivalent:",baby_net(sample_input))

def backpropagation(err,input):
  delta_m = learning_rate*(err/input) #change in slope/weight1
  return(delta_m)


# training loop - where we look at all the data, pass it into BabyNet
# calculate the errors, backpropagate accordingly, and do it over and
# over again - hoping that BabyNet gets smarter.

NUMBER_OF_EPOCHS = 1000
for i in range(NUMBER_OF_EPOCHS):
  print("**** Epoch:",i,"****")
  for d in range(len(data)):
    prediction = baby_net(data[d][0])
    print("\tPrediction:",prediction)
    err = error(prediction,data[d][1])
    print("\tError:",err)
    # adjust the model weight(s) [we have only one - the slope]
    # we do this by updating the global weight1 variable
    weight1 = weight1 + backpropagation(err,data[d][0])
    print("Weight1(slope)",weight1)

import matplotlib.pyplot as plt

for i in range(len(data)):
  x,y = data[i]
  plt.scatter(x,y)

plt.axline((0,weight2),slope=weight1,linewidth=2,color='r')

